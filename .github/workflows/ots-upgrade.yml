name: ots-upgrade
on:
  schedule:
    - cron: "*/30 * * * *"
  workflow_dispatch: {}
  workflow_run:
    workflows:
      - releases-manifest
    types:
      - completed
  push:
    paths:
      - "docs/letter.md.asc"
      - "docs/index.html"

concurrency:
  group: letter-artifacts-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  actions: read

jobs:
  precheck:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.decision.outputs.should_run }}
    steps:
      - name: Determine whether scheduled run should proceed
        id: decision
        shell: bash
        env:
          EVENT_NAME: ${{ github.event_name }}
          REF_NAME: ${{ github.ref_name }}
          REF: ${{ github.ref }}
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          REPOSITORY: ${{ github.repository }}
        run: |
          set -euo pipefail

          if [[ "${EVENT_NAME}" != "schedule" ]]; then
            echo "Event '${EVENT_NAME}' is not schedule; proceeding."
            printf 'should_run=%s\n' 'true' >> "$GITHUB_OUTPUT"
            exit 0
          fi

          branch="${REF_NAME:-}"
          if [[ -z "$branch" && -n "${REF:-}" ]]; then
            branch="${REF#refs/heads/}"
          fi
          if [[ -z "$branch" && -n "${DEFAULT_BRANCH:-}" ]]; then
            branch="$DEFAULT_BRANCH"
          fi
          if [[ -z "$branch" ]]; then
            branch="main"
          fi

          raw_url="https://raw.githubusercontent.com/${REPOSITORY}/${branch}/docs/index.html"
          echo "Fetching ${raw_url} ..."
          if ! content="$(curl -fsSL "$raw_url")"; then
            echo "Unable to fetch docs/index.html from ${raw_url}; proceeding."
            printf 'should_run=%s\n' 'true' >> "$GITHUB_OUTPUT"
            exit 0
          fi

          if echo "$content" | grep -Eq 'Bitcoin block <strong>[0-9]+'; then
            echo "Detected finalized Bitcoin block in docs/index.html; skipping scheduled run."
            printf 'should_run=%s\n' 'false' >> "$GITHUB_OUTPUT"
          else
            echo "No finalized Bitcoin block detected; proceeding."
            printf 'should_run=%s\n' 'true' >> "$GITHUB_OUTPUT"
          fi

  upgrade-and-update:
    needs: precheck
    if: ${{ (github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success') && needs.precheck.outputs.should_run == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install OpenTimestamps client + alt verifier
        run: |
          python -m pip install --upgrade opentimestamps-client
          wget -q https://go.dev/dl/go1.22.5.linux-amd64.tar.gz
          sudo rm -rf /usr/local/go
          sudo tar -C /usr/local -xzf go1.22.5.linux-amd64.tar.gz
          echo "/usr/local/go/bin" >> $GITHUB_PATH
          echo "GOROOT=/usr/local/go" >> $GITHUB_ENV
          /usr/local/go/bin/go install github.com/fiatjaf/ots@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Prepare proof + determine footer status
        id: status
        shell: bash
        run: |
          set -euo pipefail

          STATUS="Bitcoin anchoring pending. Proof will update automatically."
          TARGET=""

          if ls letter/*.asc 1>/dev/null 2>&1; then
            TARGET="$(ls -t letter/*.asc | head -n1)"
          elif [[ -f docs/letter.md.asc ]]; then
            TARGET="docs/letter.md.asc"
          fi

          if [[ -n "$TARGET" ]]; then
            echo "Using TARGET='$TARGET'"
            if [[ ! -f "${TARGET}.ots" ]]; then
              echo "No .ots present; stamping"
              ots stamp "$TARGET"
            else
              echo "Found ${TARGET}.ots; skipping stamp."
            fi

            ots upgrade "${TARGET}.ots" || true

            if [[ -f "${TARGET}.ots" ]]; then
              git add "${TARGET}.ots"

              cp "${TARGET}.ots" /tmp/proof.ots
              ots upgrade /tmp/proof.ots || true

              HEIGHT=""
              if PY_OUT="$(python .github/scripts/extract_block_height.py /tmp/proof.ots)"; then
                HEIGHT="${PY_OUT//$'\n'/}"
                HEIGHT="${HEIGHT//$'\r'/}"
              fi

              if [[ -z "$HEIGHT" ]]; then
                set +e
                OUT="$(ots verify /tmp/proof.ots 2>&1)"
                ALT="$("$HOME/go/bin/ots" verify /tmp/proof.ots 2>&1)"
                INFO="$(ots info /tmp/proof.ots 2>&1)"
                OUT="$OUT"$'\n'"$ALT"$'\n'"$INFO"
                set -e
                HEIGHT="$(echo "$OUT" |
                  grep -Eo 'block[[:space:]]*#?[0-9]+|blockheight[[:space:]]*#?[0-9]+|BitcoinBlockHeaderAttestation\([0-9]+\)' |
                  grep -Eo '[0-9]+' |
                  tail -n1 || true)"
              fi

              if [[ -n "$HEIGHT" ]]; then
                STATUS="Bitcoin block <strong>${HEIGHT}</strong> attests the letter existed prior to that block."
              fi
            fi
          fi

          STATUS_SANITIZED="$(printf '%s' "$STATUS" | tr '\n' ' ' | tr -d '\r')"
          printf 'status_line=%s\n' "$STATUS_SANITIZED" >> "$GITHUB_OUTPUT"

      - name: Ensure footer (scriptless, centered)
        shell: bash
        env:
          STATUS_LINE: ${{ steps.status.outputs.status_line }}
        run: |
          set -euo pipefail

          HTML="docs/index.html"
          [[ -f "$HTML" ]] || { echo "Missing $HTML" >&2; exit 1; }

          # Remove any prior OTS blocks or stray legacy script tags
          perl -0777 -pe 's/<!-- OTS-START -->.*?<!-- OTS-END -->\s*//gs; s#<script id="ots-proof".*?</script>\s*##gs' -i "$HTML"

          STATUS="${STATUS_LINE:-Bitcoin anchoring pending. Proof will update automatically.}"

          {
            printf '%s\n' '<!-- OTS-START -->'
            printf '%s\n' '<section id="timestamp-proof" style="max-width:48rem;margin:2rem auto 0 auto;padding-top:1rem;border-top:1px solid #e5e7eb;text-align:center;font-size:0.95rem;line-height:1.5;">'
            printf '%s\n' '  <h3 style="margin:0 0 .5rem 0;font-size:1.05rem;">Timestamp proof (Bitcoin)</h3>'
            printf '  <p id="ots-line">%s</p>\n' "${STATUS}"
            printf '%s\n' '</section>'
            printf '%s\n' '<!-- OTS-END -->'
          } >> "$HTML"

      - name: Rebase onto latest ${{ github.ref_name }} before committing
        shell: bash
        run: |
          set -euo pipefail
          branch="${GITHUB_REF##*/}"
          git fetch origin "$branch"
          git pull --rebase --autostash origin "$branch"

      - name: Wait for GitHub Pages to be idle
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: .github/scripts/wait_for_pages_idle.sh

      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(ots): upgrade proof + refresh status [ots-upgrade-auto]"
          file_pattern: docs/index.html

