name: ots-upgrade
on:
  workflow_dispatch:
    inputs:
      force:
        description: "Set to true to override the finalization guard"
        required: false
        default: "false"
  workflow_run:
    workflows:
      - releases-manifest
    types:
      - completed
  push:
    paths:
      - "docs/letter.md.asc"
      - "docs/index.html"

concurrency:
  group: letter-artifacts-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  actions: write

jobs:
  precheck:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.decision.outputs.should_run }}
      cron_state: ${{ steps.decision.outputs.cron_state }}
    steps:
      - name: Determine whether workflow should proceed
        id: decision
        shell: bash
        env:
          EVENT_NAME: ${{ github.event_name }}
          REF_NAME: ${{ github.ref_name }}
          REF: ${{ github.ref }}
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          REPOSITORY: ${{ github.repository }}
          FORCE: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.force == 'true') && 'true' || 'false' }}
        run: |
          set -euo pipefail

          python .github/scripts/check_letter_finalization.py \
            --event-name "$EVENT_NAME" \
            --repository "$REPOSITORY" \
            --ref-name "$REF_NAME" \
            --ref "$REF" \
            --default-branch "$DEFAULT_BRANCH" \
            --force "$FORCE" \
            --github-output "${GITHUB_OUTPUT:-}"

  manage-cron-flag:
    needs: precheck
    if: ${{ needs.precheck.outputs.cron_state != 'none' }}
    runs-on: ubuntu-latest
    steps:
      - name: Update cron toggle variable
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DESIRED: ${{ needs.precheck.outputs.cron_state }}
        run: |
          set -euo pipefail

          repo="${GITHUB_REPOSITORY:-}"
          if [[ -n "$repo" ]]; then
            repo_args=(--repo "$repo")
          else
            repo_args=()
          fi

          case "$DESIRED" in
            enable)
              gh variable set OTS_UPGRADE_CRON_ENABLED --body true "${repo_args[@]}"
              ;;
            disable)
              gh variable set OTS_UPGRADE_CRON_ENABLED --body false "${repo_args[@]}"
              ;;
            *)
              echo "No cron toggle requested."
              ;;
          esac

  upgrade-and-update:
    needs:
      - precheck
    if: ${{ (github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success') && needs.precheck.outputs.should_run == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install OpenTimestamps client + alt verifier
        run: |
          python -m pip install --upgrade opentimestamps-client
          wget -q https://go.dev/dl/go1.22.5.linux-amd64.tar.gz
          sudo rm -rf /usr/local/go
          sudo tar -C /usr/local -xzf go1.22.5.linux-amd64.tar.gz
          echo "/usr/local/go/bin" >> $GITHUB_PATH
          echo "GOROOT=/usr/local/go" >> $GITHUB_ENV
          /usr/local/go/bin/go install github.com/fiatjaf/ots@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Prepare proof + determine footer status
        id: status
        shell: bash
        run: |
          set -euo pipefail

          STATUS="Bitcoin anchoring pending. Proof will update automatically."
          TARGET=""

          if [[ -f letter/RELEASES.json ]]; then
            TARGET="$(python .github/scripts/get_latest_letter_asc.py 2>/dev/null || true)"
          fi

          if [[ -n "$TARGET" ]]; then
            TARGET="$(printf '%s' "$TARGET" | tr -d '\r')"
          fi

          if [[ -z "$TARGET" ]] && ls letter/*.asc 1>/dev/null 2>&1; then
            TARGET="$(ls letter/*.asc | sort | tail -n1)"
          fi

          if [[ -z "$TARGET" ]] && [[ -f docs/letter.md.asc ]]; then
            TARGET="docs/letter.md.asc"
          fi

          OTS_CLI="$(command -v ots 2>/dev/null || true)"
          ALT_CLI="$HOME/go/bin/ots"

          if [[ -n "$TARGET" ]]; then
            echo "Using TARGET='$TARGET'"

            if [[ -n "$OTS_CLI" ]]; then
              if [[ ! -f "${TARGET}.ots" ]]; then
                echo "No .ots present; stamping"
                if "$OTS_CLI" stamp "$TARGET"; then
                  echo "Stamp completed"
                else
                  echo "Warning: ots stamp failed; continuing without a freshly stamped proof" >&2
                fi
              else
                echo "Found ${TARGET}.ots; skipping stamp."
              fi

              "$OTS_CLI" upgrade "${TARGET}.ots" || true
            else
              echo "Warning: ots CLI unavailable; skipping stamp/upgrade steps" >&2
            fi

            if [[ -f "${TARGET}.ots" ]]; then
              if ! git add "${TARGET}.ots" 2>/tmp/git-add.log; then
                echo "Warning: unable to stage ${TARGET}.ots" >&2
                cat /tmp/git-add.log >&2 || true
              fi
              rm -f /tmp/git-add.log || true

              if cp "${TARGET}.ots" /tmp/proof.ots; then
                [[ -n "$OTS_CLI" ]] && "$OTS_CLI" upgrade /tmp/proof.ots || true

                HEIGHT=""
                PY_OUT="$(python .github/scripts/extract_block_height.py /tmp/proof.ots 2>/dev/null || true)"
                PY_OUT="${PY_OUT//$'\r'/}"
                PY_OUT="${PY_OUT//$'\n'/}"
                if [[ -n "$PY_OUT" ]]; then
                  HEIGHT="$PY_OUT"
                fi

                if [[ -z "$HEIGHT" ]]; then
                  OUT=""
                  ALT_OUT=""
                  INFO_OUT=""
                  if [[ -n "$OTS_CLI" ]]; then
                    OUT="$("$OTS_CLI" verify /tmp/proof.ots 2>&1 || true)"
                    INFO_OUT="$("$OTS_CLI" info /tmp/proof.ots 2>&1 || true)"
                  fi
                  if [[ -x "$ALT_CLI" ]]; then
                    ALT_OUT="$("$ALT_CLI" verify /tmp/proof.ots 2>&1 || true)"
                  fi

                  COMBINED="$OUT"$'\n'"$ALT_OUT"$'\n'"$INFO_OUT"
                  HEIGHT="$(printf '%s\n' "$COMBINED" |
                    grep -Eo 'block[[:space:]]*#?[0-9]+|blockheight[[:space:]]*#?[0-9]+|BitcoinBlockHeaderAttestation\([0-9]+\)' |
                    grep -Eo '[0-9]+' |
                    tail -n1 || true)"
                fi

                if [[ -n "$HEIGHT" ]]; then
                  STATUS="Bitcoin block <strong>${HEIGHT}</strong> attests the letter existed prior to that block."
                fi
              else
                echo "Warning: unable to copy ${TARGET}.ots for inspection" >&2
              fi
            fi
          fi

          STATUS_SANITIZED="$(printf '%s' "$STATUS" | tr '\n' ' ' | tr -d '\r')"
          if [[ -n "${GITHUB_OUTPUT:-}" ]]; then
            printf 'status_line=%s\n' "$STATUS_SANITIZED" >> "$GITHUB_OUTPUT"
          else
            printf 'status_line=%s\n' "$STATUS_SANITIZED"
          fi

      - name: Ensure footer (scriptless, centered)
        shell: bash
        env:
          STATUS_LINE: ${{ steps.status.outputs.status_line }}
        run: |
          set -euo pipefail

          HTML="docs/index.html"
          [[ -f "$HTML" ]] || { echo "Missing $HTML" >&2; exit 1; }

          # Remove any prior OTS blocks or stray legacy script tags
          perl -0777 -pe 's/<!-- OTS-START -->.*?<!-- OTS-END -->\s*//gs; s#<script id="ots-proof".*?</script>\s*##gs' -i "$HTML"

          STATUS="${STATUS_LINE:-Bitcoin anchoring pending. Proof will update automatically.}"

          {
            printf '%s\n' '<!-- OTS-START -->'
            printf '%s\n' '<section id="timestamp-proof" style="max-width:48rem;margin:2rem auto 0 auto;padding-top:1rem;border-top:1px solid #e5e7eb;text-align:center;font-size:0.95rem;line-height:1.5;">'
            printf '%s\n' '  <h3 style="margin:0 0 .5rem 0;font-size:1.05rem;">Timestamp proof (Bitcoin)</h3>'
            printf '  <p id="ots-line">%s</p>\n' "${STATUS}"
            printf '%s\n' '</section>'
            printf '%s\n' '<!-- OTS-END -->'
          } >> "$HTML"

      - name: Rebase onto latest ${{ github.ref_name }} before committing
        shell: bash
        run: |
          set -euo pipefail
          branch="${GITHUB_REF##*/}"
          git fetch origin "$branch"
          git pull --rebase --autostash origin "$branch"

      - name: Wait for GitHub Pages to be idle
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: .github/scripts/wait_for_pages_idle.sh

      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(ots): upgrade proof + refresh status [ots-upgrade-auto]"
          file_pattern: |
            docs/index.html
            letter/*.ots
            docs/*.ots
